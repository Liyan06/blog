<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OPTIMIZATION on Liyan Tang</title>
    <link>https://tangliyan.com/blog/tags/optimization/</link>
    <description>Recent content in OPTIMIZATION on Liyan Tang</description>
    <image>
      <url>https://tangliyan.com/blog/papermod-cover.png</url>
      <link>https://tangliyan.com/blog/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tangliyan.com/blog/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Convex Optimization - Primal problem to Dual problem</title>
      <link>https://tangliyan.com/blog/posts/convex2/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tangliyan.com/blog/posts/convex2/</guid>
      <description>Consider an optimization problem in the standard form (we call this a primal problem):
We denote the optimal value of this as $p^\star$. We don&amp;rsquo;t assume the problem is convex.
The Lagrange dual function We define the Lagrangian $L$ associated with the problem as $$ L(x,\lambda, v) = f_0(x) + \sum^m_{i=1}\lambda_if_i(x) + \sum^p_{i=1}v_ih_i(x)$$ We call vectors $\lambda$ and $v$ the dual variables or Lagrange multiplier vectors associated with the problem (1).</description>
    </item>
    
    <item>
      <title>Introduction to Convex Optimization - Basic Concepts</title>
      <link>https://tangliyan.com/blog/posts/convex1/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tangliyan.com/blog/posts/convex1/</guid>
      <description>Optimization problem All optimization problems can be written as:
Optimization Categories   convex v.s. non-convex Deep Neural Network is non-convex
  continuous v.s.discrete Most are continuous variable; tree structure is discrete
  constrained v.s. non-constrained We add prior to make it a constrained problem
  smooth v.s.non-smooth Most are smooth optimization
  Different initialization brings different optimum (if not convex) Idea: Give up global optimal and find a good local optimal.</description>
    </item>
    
  </channel>
</rss>
